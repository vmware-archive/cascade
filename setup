#!/bin/sh

WHITE='\033[1;37m'
LCYAN='\033[1;36m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

echo "                                                                               
            :/${LCYAN}++${NC}+++++/-                                                                             
         -o+-. ${LCYAN}--${NC}    .:o+.                                                                          
        o+   ${CYAN}ss${LCYAN}++${CYAN}ooooo${NC}  .o+                                                                         
       s: ${CYAN}-+${BLUE}o-${LCYAN}///${BLUE}:::/-${CYAN}s:.${NC} +o      ${WHITE}-::::-     /.    .::::-   .:::::     /-    ./::::.   ::::::${NC}     
      +o  ${CYAN}/s${BLUE}-s ${LCYAN}--${BLUE}    o+${CYAN}o:${NC}  s-   ${WHITE}.o.         o.o.   s.      +:         +-+-   -+    -o  +-    ${NC}       
      o/  ${CYAN}+s${BLUE}-o ${LCYAN}-....${BLUE} o+${CYAN}o:${NC}  o/   ${WHITE}/:         o   o   .:/::- -+         +-  +-  -+     /: +/::::${NC}      
      ++  ${CYAN}/s${BLUE}-o  ${LCYAN}....${BLUE} o+${CYAN}o:${NC}  s-   ${WHITE}.o        o:::::o       o- o-       //::::o- -+    .o  +-    ${NC}       
       s: ${CYAN}-+${BLUE}o:/::::${LCYAN}+${BLUE}::${CYAN}s/.${NC} +o      ${WHITE}:::::: :.     ./ -:::::   -/:::: -:      + ./::::-   :/::::${NC}      
       .o/  ${CYAN}.sssoos${LCYAN}+${CYAN}oo${NC}  .o+                                                                        
         :o/-      ${LCYAN}.${NC}   ++.                                                                          
           .:/+++++${LCYAN}+${NC}+/-                                     VMware Cascade Build Setup Script
"

PROCESSORS="$(getconf _NPROCESSORS_ONLN)"
if [ -d "build" ]; then
  echo "Build is already setup! Run:"
  echo "${WHITE}cd build"
  echo "make -j ${PROCESSORS}"
  echo "make install${NC}"
  echo 
  echo "To build and install. "
  echo 
  echo "Or, to reconfigure, delete the build directory first:"
  echo "${RED}rm -rf build${NC}"
  echo "Then run this script again."
  exit 1
fi

SILENT=0
COVERAGE=0
DO_BUILD=1
DO_TESTS=1
DO_INSTALL=1
BUILD_TYPE="Release"
WRAPPER=""
CMAKE_FLAGS=""

for i in "$@"; do
  case $i in
    --debug)
      BUILD_TYPE="Debug"
      ;;
    --coverage)
      COVERAGE=1
      WRAPPER="build-wrapper-linux-x86-64 --out-dir bw-output"
      CMAKE_FLAGS="-DCOVERAGE=TRUE"
      ;;
    --no-install)
      DO_INSTALL=0
      ;;
    --no-build)
      DO_BUILD=0
      ;;
    --no-test)
      DO_TESTS=0
      ;;
    --silent)
      SILENT=1
      ;;
    *)
      ;;
  esac
done

check_homebrew() {
  printf '%.20s %s' "$1..................................";
  if brew ls --versions $1 > /dev/null; then
    echo "${GREEN}present${NC}"
    return 1
  else
    echo "${RED}missing${NC}"
    if [ $1 == "gtest" ]; then
      MISSING="share/cascade/script/gtest.rb $MISSING"
    else
      MISSING="$1 $MISSING"
    fi
    return 0
  fi
}

check_dpkg() {
  printf '%.20s %s' "$1..................................";
  if dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -c "ok installed"; then
    echo "${GREEN}present${NC}"
    return 1
  else
    echo "${RED}missing${NC}"
    MISSING="$1 $MISSING"
    return 0
  fi
}

call_prompt() {
  if [ $SILENT -eq 1 ]; then
    return $2
  else
    echo $1
    echo "1) Yes"
    echo "2) No"
    read -p "#? " yn
    case $yn in
      [yY]* ) return 1
              ;;
      [nN]* ) return 0
              ;;
      "1" )   return 1 
              ;;
      "0" )   return 0 
              ;;
      * )     echo "Please enter yes or no"
              ;;
    esac
  fi
}

build_cascade() {
  echo "Creating build directory..."
  mkdir -p build
  cd build
  echo "Running cmake..."
  cmake $1 $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
  echo "Build directory configured and makefiles generated."
  call_prompt "Would you like us to build Cascade for you?" $DO_BUILD
  if [ $? -eq 1 ]; then
    $WRAPPER make -j ${PROCESSORS};
  else 
    echo "When you are ready, to build cascade run:";
    echo "${WHITE}cd build${NC}";
    echo "${WHITE}make -j ${PROCESSORS}${NC}";
    echo "Then to run the tests:";
    echo "${WHITE}make test${NC}";
    echo "Finally, to install cascade to your system:";
    echo "${WHITE}sudo make install${NC}";
    cd ..;
    exit 0;
  fi
  call_prompt "Would you like us to run the tests to make sure Cascade was built correctly?" $DO_TESTS
  if [ $? -eq 1 ]; then
    if [ $COVERAGE -eq 0 ]; then 
      make test
    else
      make cascade_coverage
    fi
    if [ $? -ne 0 ]; then
      return 1
    fi
  else 
    echo "Skipping the tests. If you want to run the tests run:"
    echo "${WHITE}cd build${NC}"
    echo "${WHITE}make test${NC}"
  fi
  call_prompt "Would you like us to install Cascade to your system (requires admin rights)?" $DO_INSTALL
  if [ $? -eq 1 ]; then
    sudo make install 
    echo "Cascade installed. You can run cascade by typing ${WHITE}cascade${NC} from your terminal."
    echo "If you would like to develop Cascade, the appropriate Makefiles have been generated in the ${WHITE}build${NC} directory."
  else 
    echo "Skipping installation. You can manually run Cascade from ${WHITE}build/bin/cascade${NC}"
    echo "Or to install,"
    echo "${WHITE}cd build${NC}"
    echo "${WHITE}sudo make install${NC}"
  fi
  cd ..                          
}

unameOut="$(uname -s)"
case "${unameOut}" in
  Linux*)     
    echo "Detected Linux."
    if ! [ -x "$(command -v dpkg-query)" ]; then
      echo "This is not a dpkg/apt managed system."
      echo "If your build fails, please check for the following packages: "
      echo "  g++ git cmake flex libfl-dev bison python3-venv python3-dev libncurses5-dev libbenchmark-dev libgtest-dev verilator"
    else
      echo "dpkg is ${GREEN}installed${NC}."
      echo "Checking for required dpkg packages..."
      MISSING=""
      check_dpkg g++ 
      check_dpkg git 
      check_dpkg cmake 
      check_dpkg flex 
      check_dpkg libfl-dev
      check_dpkg bison 
      check_dpkg python3-venv 
      check_dpkg python3-dev 
      check_dpkg libncurses5-dev 
      check_dpkg libbenchmark-dev 
      check_dpkg libgtest-dev 
      check_dpkg verilator 
      if [ "$MISSING" != "" ]; then
        if [ $SILENT -eq 0 ]; then
          echo "You are missing the following packages: $MISSING"
          call_prompt "Would you like us to install these packages using apt for you?" 1
          case $? in
           1 ) ;;
           0 ) echo "Please install these packages manually, then run this script again."
               exit 1
               ;;
          esac
        fi
        sudo apt-get install -y --no-install-recommends $MISSING
        cd /usr/src/gtest; \
          sudo cmake CMakeLists.txt; \
          sudo make; \
          sudo make install; \
          cd -; \
          sudo rm /usr/local/lib/libgtest_main.a && sudo ln -n /usr/src/gtest/libgtest_main.a /usr/local/lib/libgtest_main.a; \
          sudo rm /usr/local/lib/libgtest.a && sudo ln -n /usr/src/gtest/libgtest.a /usr/local/lib/libgtest.a;
      fi
    fi
    build_cascade "-DFLEX_EXECUTABLE=/usr/bin/flex -DBISON_EXECUTABLE=/usr/bin/bison -DFLEX_INCLUDE_DIR=/usr/include"
    ;;

  Darwin*)    
    echo "Detected macOS."
    if ! [ -x "$(command -v brew)" ]; then
      echo "This is not a homebrew managed system."
      call_prompt "Would you like us to install homebrew for you?" 1
      case $? in
        1 ) ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            ;;
        0 ) ;;
      esac
      echo "If your build fails, please check for the following packages: "
      echo "  cmake flex bison python3 ncurses google-benchmark gtest verilator"
    fi
    if [ -x "$(command -v brew)" ]; then
      echo "Homebrew is ${GREEN}installed${NC}."
      echo "Checking for required Homebrew packages..."
      MISSING=""
      check_homebrew cmake 
      check_homebrew flex 
      check_homebrew bison 
      check_homebrew python3 
      check_homebrew ncurses 
      check_homebrew google-benchmark 
      check_homebrew gtest 
      check_homebrew verilator 
      if [ "$MISSING" != "" ]; then
        if [ $SILENT -eq 0 ]; then
          echo "You are missing the following packages: $MISSING"
          call_prompt "Would you like us to install these packages using homebrew for you?" 1
          case $? in
            1 ) ;;
            0 ) echo "Please install these packages manually, then run this script again."
                exit 1
                ;;
          esac
        fi
        brew install $MISSING
        brew link --overwrite gtest
      fi
    fi
    if type xcode-select >&- && xpath=$( xcode-select --print-path ) && test -d "${xpath}" && test -x "${xpath}" ; then
      echo "xcode is ${GREEN}installed${NC}."
    else
      echo "xcode is ${RED}not installed${NC}."
      echo "xcode must be installed in order to build Cascade"
      call_prompt "Would you like us to install xcode for you?" 1
      case $yn in
        1 ) xcode-select --install
            ;;
        0 ) echo "Please install xcode manually, then run this script again."
            exit 1
            ;;
      esac
    fi
    export CPP="g++ -E"
    #if [ ! -d "/usr/include" ]; then
    #  if [ $SILENT -eq 1 ]; then
    #    echo "Your /usr/include directly does not seem to be configured correctly (CI ignored)."
    #  else
    #    echo "Your /usr/include directly does not seem to be configured correctly."
    #    OS_VERSION=$(sw_vers -productVersion | sed "s:.[[:digit:]]*.$::g")
    #    HEADERS_INSTALL_PATH="/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_${OS_VERSION}.pkg"
    #    echo "Try installing the package manually by running:"
    #    echo "${WHITE}open ${HEADERS_INSTALL_PATH}${NC}"
    #    exit 1
    #  fi
    #fi
    build_cascade "-DFLEX_EXECUTABLE=/usr/local/opt/flex/bin/flex -DBISON_EXECUTABLE=/usr/local/opt/bison/bin/bison -DFLEX_INCLUDE_DIR=/usr/local/opt/flex/include"
    ;;

  *)
    echo "Sorry, your machine type ${unameOut} is not yet supported. Please setup the cmake project manually."
    ;;
esac
